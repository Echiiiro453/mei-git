#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# mei-git v2.4 - Implementação da instalação com TUI e barra de progresso

import sys
import os
import json
import subprocess
import re
import shutil
import tempfile

# --- Configurações Iniciais ---
try:
    from dialog import Dialog
    d = Dialog(dialog="dialog", autowidgetsize=True)
    d.set_background_title("MEI Git - Assistente de Drivers para Linux")
    DIALOG_AVAILABLE = True
except ImportError:
    DIALOG_AVAILABLE = False

LOG_FILE = "/tmp/mei-git-install.log"

# --- Funções Auxiliares ---

def run_cmd_logged(cmd):
    """Executa um comando e salva sua saída no log, retornando True/False."""
    try:
        with open(LOG_FILE, "a", encoding='utf-8') as log:
            log.write(f"\n--- Executando: {cmd} ---\n")
            # Usamos Popen para garantir que a saída seja capturada corretamente
            process = subprocess.Popen(cmd, shell=True, stdout=log, stderr=subprocess.STDOUT, text=True, bufsize=1)
            process.wait()
            return process.returncode == 0
    except Exception as e:
        with open(LOG_FILE, "a", encoding='utf-8') as log:
            log.write(f"❌ Erro ao tentar executar o comando: {e}\n")
        return False

def load_db(filename):
    try:
        with open(filename) as f: return json.load(f)
    except FileNotFoundError:
        if DIALOG_AVAILABLE: d.msgbox(f"❌ Erro: Arquivo '{filename}' não encontrado.")
        return None
    except json.JSONDecodeError:
        if DIALOG_AVAILABLE: d.msgbox(f"❌ Erro: O arquivo '{filename}' tem um formato JSON inválido.")
        return None

def detect_hardware_ids():
    ids = set()
    try:
        pci = subprocess.getoutput("lspci -nn"); usb = subprocess.getoutput("lsusb")
        ids.update(re.findall(r'\[(\w{4}:\w{4})\]', pci)); ids.update(re.findall(r'ID (\w{4}:\w{4})', usb))
    except Exception: pass
    return ids

# --- Funções Principais com TUI ---

def scan_tui():
    """Função de scan que formata a saída para uma caixa de texto."""
    d.infobox("🧠 Carregando bancos de dados e escaneando hardware...")
    
    hardware_db = load_db("hardware_db.json"); install_db = load_db("drivers_install.json")
    if not hardware_db or not install_db: return

    detected_ids = detect_hardware_ids()
    if not detected_ids:
        d.msgbox("Nenhum dispositivo encontrado."); return

    report_text = "💻 DIAGNÓSTICO DE HARDWARE DO SISTEMA 💻\n" + "="*60 + "\n\n"
    
    hw_lookup = {dev_id: {"name": name, "cat": cat, "com": det.get("comment", "")} for cat, devs in hardware_db.items() for name, det in devs.items() for dev_id in det.get("device_ids", [])}
    install_lookup = {dev_id: {"name": name, "cat": cat} for cat, devs in install_db.items() for name, det in devs.items() for dev_id in det.get("device_ids", [])}

    for did in sorted(list(detected_ids)):
        if did in hw_lookup:
            info = hw_lookup[did]
            desc = info.get("com", "N/A").replace("Driver generico detectado para ", "")
            report_text += f"▶ [{info.get('cat', 'N/A').upper()}] ID: {did}\n  Nome: {desc}\n"
            
            found_recipe = False
            for key, val in install_lookup.items():
                if did.startswith(key):
                    report_text += f"  Acao: Receita '{val.get('name')}' encontrada! ✅ [INSTALAVEL]\n"
                    found_recipe = True; break
            if not found_recipe:
                report_text += "  Acao: Nenhuma receita de instalação encontrada.\n"
            report_text += "-" * 60 + "\n"
    
    report_filename = ""
    try:
        with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix=".txt", encoding='utf-8') as tmp_file:
            tmp_file.write(report_text)
            report_filename = tmp_file.name
        d.textbox(report_filename, height=0, width=0)
    finally:
        if os.path.exists(report_filename):
            os.remove(report_filename)


def install_tui():
    """Interface TUI completa para o processo de instalação."""
    install_db = load_db("drivers_install.json")
    if not install_db: return

    categories = list(install_db.keys())
    menu_items = [(cat.capitalize(), "") for cat in categories]
    code, tag = d.menu("Selecione a categoria do driver:", choices=menu_items, height=0, width=60)

    if code == d.OK:
        category_to_install = tag.lower()
        d.infobox(f"🔍 Escaneando hardware para a categoria '{category_to_install}'...")
        detected_ids = detect_hardware_ids()
        
        target_driver = None; driver_name = ""
        for name, details in install_db.get(category_to_install, {}).items():
            for db_id in details.get("device_ids", []):
                if any(did.startswith(db_id) for did in detected_ids):
                    target_driver, driver_name = details, name; break
            if target_driver: break
        
        if not target_driver:
            d.msgbox(f"❌ Nenhum driver compativel foi encontrado para a categoria '{category_to_install}'."); return

        confirm_text = f"✅ Driver compativel encontrado: '{driver_name}'.\n\n{target_driver.get('comment', '')}\n\nDeseja iniciar a instalacao?"
        if d.yesno(confirm_text, height=12, width=70) == d.OK:
            open(LOG_FILE, "w").close() # Limpa o log antigo
            
            d.gauge_start(text="Iniciando...", percent=0)
            success = True
            install_type = target_driver.get("type")
            
            if install_type == "git":
                repo_url = target_driver.get("repo")
                repo_name = repo_url.split("/")[-1].replace(".git", "")
                
                d.gauge_update(25, text=f"Passo 1/3: Clonando repositorio...")
                if os.path.exists(repo_name):
                    with open(LOG_FILE, "a") as log: log.write(f"Diretorio '{repo_name}' ja existe. Pulando clone.\n")
                elif not run_cmd_logged(f"git clone {repo_url}"): success = False
                
                if success:
                    try:
                        original_dir = os.getcwd(); os.chdir(repo_name)
                        d.gauge_update(60, text="Passo 2/3: Compilando e instalando...")
                        for step in target_driver.get("build_steps", []):
                            if not run_cmd_logged(step): success = False; break
                        os.chdir(original_dir)
                    except Exception: success = False

            elif install_type in ["apt", "shell"]:
                 d.gauge_update(50, text=f"Passo 1/1: Executando comandos...")
                 deps = target_driver.get("package") if install_type == "apt" else " ".join(target_driver.get("build_steps", []))
                 cmd = f"sudo apt-get install -y {deps}" if install_type == "apt" else " && ".join(target_driver.get("build_steps", []))
                 if not run_cmd_logged(cmd): success = False

            d.gauge_update(90, text="Passo 3/3: Finalizando...")
            
            module = target_driver.get("module")
            if module and success: run_cmd_logged(f"sudo modprobe {module}")

            d.gauge_update(100, text="Concluido!")
            d.gauge_stop()

            if success:
                d.msgbox("✅ Instalacao concluida com sucesso!")
            else:
                d.msgbox("❌ A instalacao falhou. O log de erro sera exibido.", height=8, width=60)
                with open(LOG_FILE, "r") as log:
                    d.textbox(log.read(), height=0, width=0)
        else:
            d.msgbox("Instalacao cancelada pelo usuario.")


def main_tui():
    """Controlador principal que exibe o menu TUI."""
    while True:
        code, tag = d.menu("Selecione uma opção:",
                           choices=[("1", "Diagnosticar Hardware (Scan)"),
                                    ("2", "Instalar Driver por Categoria"),
                                    ("3", "Sair")],
                                    width=70, height=10)
        if code == d.OK:
            if tag == "1": scan_tui()
            elif tag == "2": install_tui()
            elif tag == "3": break
        else: break
    os.system('clear')

# --- Modo CLI (Placeholder para futuras implementações) ---
def main_cli(args):
    """Controlador do modo de linha de comando."""
    print("Modo CLI nao implementado. Rode 'mei-git' sem argumentos para a interface grafica.")

# --- Ponto de Entrada Principal ---
if __name__ == "__main__":
    if not DIALOG_AVAILABLE and len(sys.argv) == 1:
        sys.exit(1)

    if len(sys.argv) > 1:
        main_cli(sys.argv[1:])
    else:
        main_tui()