#!/usr/bin/env python3
import sys
import os
import json
import subprocess
import re
import shutil

# --- Fun√ß√µes Auxiliares e de Carregamento ---

def run_cmd_stream(cmd):
    """
    Executa um comando no shell, mostrando a sa√≠da em tempo real.
    Ideal para comandos longos como compila√ß√£o ou instala√ß√£o.
    """
    print(f"üî© Executando: {cmd}")
    try:
        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1)
        for line in iter(process.stdout.readline, ''):
            print(f"    {line}", end='')
        process.wait()
        return process.returncode == 0
    except Exception as e:
        print(f"‚ùå Erro ao executar comando: {e}")
        return False

def run_cmd_get_output(cmd):
    """Executa um comando e retorna sua sa√≠da como string."""
    return subprocess.getoutput(cmd)
    
def load_db(filename):
    """Carrega um arquivo JSON e retorna um dicion√°rio."""
    try:
        with open(filename) as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo '{filename}' n√£o encontrado.")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå Erro: O arquivo '{filename}' possui um formato JSON inv√°lido.")
        return None

# --- Fun√ß√µes de Detec√ß√£o e Scan ---

def detect_hardware_ids():
    """Apenas detecta e retorna os IDs de hardware do sistema."""
    detected_ids = set()
    try:
        pci_output = run_cmd_get_output("lspci -nn")
        pci_ids = re.findall(r'\[(\w{4}:\w{4})\]', pci_output)
        detected_ids.update(pci_ids)
        
        usb_output = run_cmd_get_output("lsusb")
        usb_ids = re.findall(r'ID (\w{4}:\w{4})', usb_output)
        detected_ids.update(usb_ids)
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel escanear o hardware: {e}")
    return detected_ids

def scan_and_identify_hardware():
    """A fun√ß√£o de scan inteligente."""
    print("üß† Carregando bancos de dados...")
    hardware_db = load_db("hardware_db.json")
    install_db = load_db("drivers_install.json")
    if not hardware_db or not install_db: return

    print("üîç Escaneando e identificando seu hardware...")
    detected_ids = detect_hardware_ids()
    if not detected_ids: print("Nenhum dispositivo encontrado."); return

    print("\n" + "="*50 + "\nüíª DIAGN√ìSTICO DE HARDWARE DO SISTEMA\n" + "="*50 + "\n")

    hw_lookup = {dev_id: {"name": name, "cat": cat, "com": det.get("comment", "")}
                 for cat, devs in hardware_db.items() for name, det in devs.items() for dev_id in det.get("device_ids", [])}
    install_lookup = {dev_id: {"name": name, "cat": cat}
                      for cat, devs in install_db.items() for name, det in devs.items() for dev_id in det.get("device_ids", [])}

    found_any = False
    for did in sorted(list(detected_ids)):
        if did in hw_lookup:
            found_any = True
            info = hw_lookup[did]
            desc = info.get("com", "N/A").replace("Driver gen√©rico detectado para ", "")
            
            print(f"‚ñ∂ [{info.get('cat', 'N/A').upper()}] ID: {did}\n  Nome: {desc}")
            
            found_recipe = False
            for key, val in install_lookup.items():
                if did.startswith(key):
                    print(f"  A√ß√£o: Receita '{val.get('name')}' encontrada! ‚úÖ [INSTAL√ÅVEL]")
                    print(f"        ‚Üí Para instalar, rode: sudo mei-git install {val.get('cat')}")
                    found_recipe = True
                    break
            if not found_recipe:
                print("  A√ß√£o: Nenhuma receita de instala√ß√£o encontrada. O driver do kernel deve ser suficiente.")
            print("-" * 50)
    
    if not found_any: print("Nenhum dispositivo detectado correspondeu ao banco de dados.")

# --- Fun√ß√£o de Instala√ß√£o ---

def install_driver(category):
    """Motor de instala√ß√£o que l√™ e executa as 'receitas'."""
    install_db = load_db("drivers_install.json")
    if not install_db: return

    print("üîç Escaneando hardware para encontrar um driver compat√≠vel...")
    detected_ids = detect_hardware_ids()
    if not detected_ids: print("‚ùå N√£o foi poss√≠vel detectar hardware."); return

    target_driver = None
    driver_name = ""
    drivers_in_category = install_db.get(category, {})
    
    for name, details in drivers_in_category.items():
        for db_id in details.get("device_ids", []):
            if any(did.startswith(db_id) for did in detected_ids):
                target_driver = details
                driver_name = name
                break
        if target_driver:
            break
    
    if not target_driver:
        print(f"‚ùå Nenhum driver compat√≠vel para sua m√°quina foi encontrado na categoria '{category}'.")
        return
        
    print(f"‚úÖ Driver compat√≠vel encontrado: '{driver_name}'. Iniciando instala√ß√£o...")
    print(f"   Coment√°rio: {target_driver.get('comment', 'N/A')}")

    # A l√≥gica de instala√ß√£o come√ßa aqui
    install_type = target_driver.get("type")
    
    # Instala√ß√£o via APT (Debian-based)
    if install_type == "apt":
        package = target_driver.get("package")
        if not package:
            print("‚ùå Erro na receita: tipo 'apt' sem a chave 'package'."); return
        print("\n[Passo 1/1] Instalando pacote via APT...")
        if not run_cmd_stream(f"sudo apt-get install -y {package}"):
            print(f"‚ùå Falha ao instalar o pacote '{package}'."); return
    
    # Instala√ß√£o via Shell
    elif install_type == "shell":
        build_steps = target_driver.get("build_steps", [])
        if not build_steps:
            print("‚ùå Erro na receita: tipo 'shell' sem a chave 'build_steps'."); return
        print("\n[Passo 1/1] Executando comandos shell...")
        for step in build_steps:
            if not run_cmd_stream(step):
                print(f"‚ùå Falha ao executar o comando: '{step}'."); return

    # Instala√ß√£o via Git
    elif install_type == "git":
        repo_url = target_driver.get("repo")
        repo_name = repo_url.split("/")[-1].replace(".git", "")
        
        print(f"\n[Passo 1/3] Clonando reposit√≥rio de '{repo_name}'...")
        if os.path.exists(repo_name):
            print(f"   - O diret√≥rio '{repo_name}' j√° existe. Pulando clone.")
        elif not run_cmd_stream(f"git clone {repo_url}"):
            print("‚ùå Falha ao clonar o reposit√≥rio."); return

        try:
            original_dir = os.getcwd()
            os.chdir(repo_name)

            print(f"\n[Passo 2/3] Executando passos de compila√ß√£o...")
            build_steps = target_driver.get("build_steps", [])
            for step in build_steps:
                if not run_cmd_stream(step):
                    print(f"‚ùå Falha no passo de compila√ß√£o: '{step}'."); os.chdir(original_dir); return
            
            os.chdir(original_dir)
        except Exception as e:
            print(f"‚ùå Erro durante o processo de build: {e}"); os.chdir(original_dir); return

    else:
        print(f"‚ùå Tipo de instala√ß√£o desconhecido na receita: '{install_type}'")
        return

    print(f"\n[Passo 3/3] Verificando p√≥s-instala√ß√£o...")
    module = target_driver.get("module")
    if module:
        print(f"   - Tentando carregar o m√≥dulo '{module}'...")
        run_cmd_stream(f"sudo modprobe {module}")
        if module in run_cmd_get_output("lsmod"):
            print(f"   - ‚úÖ M√≥dulo '{module}' carregado com sucesso no kernel.")
        else:
            print(f"   - ‚ö†Ô∏è M√≥dulo '{module}' n√£o foi encontrado no kernel ap√≥s a instala√ß√£o. Pode ser necess√°rio reiniciar.")

    print(f"\nüéâ Processo de instala√ß√£o para '{driver_name}' conclu√≠do!")

# --- Fun√ß√£o Principal (CLI) ---
def main():
    """Ponto de entrada do script."""
    args = sys.argv[1:]
    if not args:
        print("Uso: mei-git <comando> [argumento]")
        print("Comandos dispon√≠veis:")
        print("  scan          - Faz um diagn√≥stico completo do hardware e sugere a√ß√µes.")
        print("  install <cat> - Instala um driver por categoria (ex: wifi, video).")
        sys.exit(1)

    command = args[0]
    if command == "scan":
        scan_and_identify_hardware()
    elif command == "install":
        if len(args) < 2:
            print("‚ùå Erro: Especifique a categoria. Uso: mei-git install <categoria>"); sys.exit(1)
        
        category_to_install = args[1]
        install_driver(category_to_install)
    else:
        print(f"Comando desconhecido: '{command}'")
        sys.exit(1)

if __name__ == "__main__":
    main()