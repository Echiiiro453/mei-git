#!/usr/bin/env python3
import sys
import os
import json
import subprocess
import re

# --- Fun√ß√µes Auxiliares e de Carregamento ---

def run_cmd(cmd):
    """Executa um comando no shell e retorna o resultado."""
    return subprocess.getoutput(cmd)

def load_db(filename):
    """Carrega um arquivo JSON e retorna um dicion√°rio."""
    try:
        with open(filename) as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo '{filename}' n√£o encontrado. Certifique-se de que ele est√° na mesma pasta.")
        return None
    except json.JSONDecodeError:
        print(f"‚ùå Erro: O arquivo '{filename}' possui um formato JSON inv√°lido.")
        return None

# --- Fun√ß√µes de Detec√ß√£o e Scan ---

def detect_hardware_ids():
    """Apenas detecta e retorna os IDs de hardware do sistema."""
    detected_ids = set()
    try:
        pci_output = run_cmd("lspci -nn")
        pci_ids = re.findall(r'\[(\w{4}:\w{4})\]', pci_output)
        detected_ids.update(pci_ids)
        
        usb_output = run_cmd("lsusb")
        usb_ids = re.findall(r'ID (\w{4}:\w{4})', usb_output)
        detected_ids.update(usb_ids)
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel escanear o hardware: {e}")
    return detected_ids

def scan_and_identify_hardware():
    """A nova fun√ß√£o de scan inteligente."""
    print("üß† Carregando bancos de dados...")
    hardware_db = load_db("hardware_db.json")
    install_db = load_db("drivers_install.json")

    if not hardware_db or not install_db:
        return # Erros j√° foram impressos pela fun√ß√£o load_db

    print("üîç Escaneando e identificando seu hardware...")
    detected_ids = detect_hardware_ids()

    if not detected_ids:
        print("Nenhum dispositivo encontrado.")
        return

    print("\n" + "="*50)
    print("üíª DIAGN√ìSTICO DE HARDWARE DO SISTEMA")
    print("="*50 + "\n")

    # Para otimizar, pr√©-processamos os bancos de dados
    hw_lookup = {}
    for category, devices in hardware_db.items():
        for name, details in devices.items():
            for device_id in details.get("device_ids", []):
                hw_lookup[device_id] = {"name": name, "category": category, "comment": details.get("comment", "")}

    install_lookup = {}
    for category, devices in install_db.items():
        for name, details in devices.items():
            for device_id in details.get("device_ids", []):
                install_lookup[device_id] = {"name": name, "category": category}

    found_any = False
    for did in sorted(list(detected_ids)):
        if did in hw_lookup:
            found_any = True
            info = hw_lookup[did]
            description = info.get("comment", "N/A").replace("Driver gen√©rico detectado para ", "")
            
            print(f"‚ñ∂ [{info.get('category', 'N/A').upper()}] ID: {did}")
            print(f"  Nome: {description}")
            
            if did in install_lookup:
                install_info = install_lookup[did]
                print(f"  A√ß√£o: Receita '{install_info.get('name')}' encontrada! ‚úÖ [INSTAL√ÅVEL]")
                print(f"        ‚Üí Para instalar, rode: sudo mei-git install {install_info.get('category')}")
            else:
                print("  A√ß√£o: Nenhuma receita de instala√ß√£o encontrada. O driver do kernel deve ser suficiente.")
            print("-" * 50)
    
    if not found_any:
        print("Nenhum dispositivo detectado correspondeu ao banco de dados de hardware.")

# --- Fun√ß√£o de Instala√ß√£o (Adaptada) ---

def install_driver(category):
    """Fun√ß√£o de instala√ß√£o que agora usa o 'livro de receitas'."""
    print("üìñ Carregando receitas de instala√ß√£o...")
    install_db = load_db("drivers_install.json")
    if not install_db:
        return

    detected_ids = detect_hardware_ids()
    if not detected_ids:
        print("‚ùå N√£o foi poss√≠vel detectar hardware para a instala√ß√£o.")
        return

    print(f"\nüöÄ Procurando por um driver instal√°vel na categoria '{category}'...")
    # ... (a l√≥gica de instala√ß√£o continua a mesma, apenas usando o install_db)
    # (Cole aqui a fun√ß√£o install_driver() da vers√£o anterior do script)

# --- Fun√ß√£o Principal (CLI) ---

def main():
    """Ponto de entrada do script."""
    args = sys.argv[1:]
    if not args:
        print("Uso: mei-git <comando> [argumento]")
        print("Comandos dispon√≠veis:")
        print("  scan          - Faz um diagn√≥stico completo do hardware e sugere a√ß√µes.")
        print("  install <cat> - Instala um driver por categoria (ex: wifi, video).")
        sys.exit(1)

    command = args[0]
    if command == "scan":
        scan_and_identify_hardware()
    elif command == "install":
        if len(args) < 2:
            print("‚ùå Erro: Especifique a categoria. Uso: mei-git install <categoria>")
            sys.exit(1)
        
        category_to_install = args[1]
        # A fun√ß√£o install_driver agora carrega seu pr√≥prio DB.
        install_driver(category_to_install)
    else:
        print(f"Comando desconhecido: '{command}'")
        sys.exit(1)

if __name__ == "__main__":
    main()